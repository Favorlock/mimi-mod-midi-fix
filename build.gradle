import net.darkhax.curseforgegradle.TaskPublishCurseForge

buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }

    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'net.darkhax.curseforgegradle' version '1.+'
}

apply plugin: 'org.spongepowered.mixin'

def artifactId = mod_name.replaceAll(' ', '')

java {
    archivesBaseName = artifactId
    toolchain.languageVersion = JavaLanguageVersion.of(java_version)
}

minecraft {
    mappings channel: forge_mappings_channel, version: minecraft_version

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', forge_log_markers
            property 'forge.logging.console.level', forge_log_level
            property 'forge.enabledGameTestNamespaces', mod_id

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/${mixin_remap_file}"

            mods {
                mimimodmidifix {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', forge_log_markers
            property 'forge.logging.console.level', forge_log_level
            property 'forge.enabledGameTestNamespaces', mod_id

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/${mixin_remap_file}"

            mods {
                mimimodmidifix {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', forge_log_markers
            property 'forge.logging.console.level', forge_log_level
            property 'forge.enabledGameTestNamespaces', mod_id

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/${mixin_remap_file}"

            mods {
                mimimodmidifix {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', forge_log_markers
            property 'forge.logging.console.level', forge_log_level

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'mimimodmidifix', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                mimimodmidifix {
                    source sourceSets.main
                }
            }
        }
    }
}

processResources {
    def props = project.properties.clone()

    props.put('file', [jarVersion: version])

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand props
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("curse.maven:mimi-mod-499803:3964399")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : artifactId,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : version,
                "Implementation-Title"    : mod_name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy('reobfJar')
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

task publishCurseForge(type: TaskPublishCurseForge) {
    // This token is used to authenticate with CurseForge. It should be handled
    // with the same level of care and security as your actual password. You
    // should never share your token with an untrusted source or publish it
    // publicly to GitHub or embed it within a project. The best practice is to
    // store this token in an environment variable or a build secret.
    apiToken = findProperty('curseforge_token')

    // Tells CurseForgeGradle to publish the output of the jar task. This will
    // return a UploadArtifact object that can be used to further configure the
    // file.
    def mainFile = upload(curse_project_id, jar)
    mainFile.releaseType = curse_releaseType
    // Set changelog from 'changelog.md'.
    mainFile.changelogType = 'markdown'
    mainFile.changelog = file('changelog.md')
    // Add java version tag.
    mainFile.addJavaVersion('Java 17')
    // Add mod loader tag.
    mainFile.addModLoader('Forge')
    // Add game version tag.
    mainFile.addGameVersion(minecraft_version)
    // Defines dependencies and other mod relations.
    mainFile.addRequirement('mimi-mod')

    doLast {
        if (project.hasProperty('mod_homepage')) {
            project.ext.curse_file_url = "${mod_homepage}/files/${mainFile.curseFileId}"
        }
    }
}
